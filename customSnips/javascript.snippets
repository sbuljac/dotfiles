# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
priority 100
snippet fun "function (fun)"
function ${1:function_name} (${2:argument}) {
	${VISUAL}$3
}$0
endsnippet
snippet cl "console log standard style" b
console.log(${1:'Test'})
endsnippet
snippet f "anonymus function" w
(${1}) => {
	${VISUAL}$2
}$0
endsnippet

snippet div "" b
<div>${1}</div>
endsnippet

snippet <> "- Place a custom tag and cursors" w
<${1:}></$1>
endsnippet

# JSDoc snippets

# snippet /* "A JSDoc comment" b
# /**
#  * ${1:${VISUAL}}$0
#  */
# endsnippet

snippet @p "@param {Type} varname Description" w
@param {${1:Type}} ${2:varname} ${3:Description}
endsnippet

snippet @pro "@property {Type} varname Description"
@property {${1:Type}} ${2:varname} ${3:Description}
endsnippet

snippet @ret "@return {Type} Description"
@return {${1:Type}} ${2:Description}
endsnippet

snippet @t ""
@type {${1:Type}}
endsnippet

snippet @td ""
@typedef {${1:Type}} ${2:typeName}
endsnippet

